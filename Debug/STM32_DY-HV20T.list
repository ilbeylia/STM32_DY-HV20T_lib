
STM32_DY-HV20T.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fd8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002184  08002184  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800218c  0800218c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800218c  0800218c  0001218c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002190  08002190  00012190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000001c  080021b0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080021b0  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d4d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013a2  00000000  00000000  00027d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00029140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00029778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014900  00000000  00000000  00029d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cdf  00000000  00000000  0003e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080f93  00000000  00000000  00046317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c72aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001828  00000000  00000000  000c72fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002154 	.word	0x08002154

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08002154 	.word	0x08002154

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <dy_hv20t_init>:
						GPIO_TypeDef*	ses8_GPIOx,
						uint16_t 		ses8_GPIO_Pin,
						GPIO_TypeDef*	Busy_GPIOx,
						uint16_t 		Busy_GPIO_Pin,
						uint16_t mode)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4613      	mov	r3, r2
 80004e6:	80fb      	strh	r3, [r7, #6]

	dy_hv20t_config->ses1_GPIOx 	= ses1_GPIOx;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	601a      	str	r2, [r3, #0]
	dy_hv20t_config->ses1_GPIO_Pin  = ses1_GPIO_Pin;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	88fa      	ldrh	r2, [r7, #6]
 80004f2:	809a      	strh	r2, [r3, #4]

	dy_hv20t_config->ses2_GPIOx 	= ses2_GPIOx;
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	609a      	str	r2, [r3, #8]
	dy_hv20t_config->ses2_GPIO_Pin  = ses2_GPIO_Pin;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	8b3a      	ldrh	r2, [r7, #24]
 80004fe:	819a      	strh	r2, [r3, #12]

	dy_hv20t_config->ses3_GPIOx 	= ses3_GPIOx;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	69fa      	ldr	r2, [r7, #28]
 8000504:	611a      	str	r2, [r3, #16]
	dy_hv20t_config->ses3_GPIO_Pin  = ses3_GPIO_Pin;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	8c3a      	ldrh	r2, [r7, #32]
 800050a:	829a      	strh	r2, [r3, #20]

	dy_hv20t_config->ses4_GPIOx 	= ses4_GPIOx;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000510:	619a      	str	r2, [r3, #24]
	dy_hv20t_config->ses4_GPIO_Pin  = ses4_GPIO_Pin;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000516:	839a      	strh	r2, [r3, #28]

	dy_hv20t_config->ses5_GPIOx 	= ses5_GPIOx;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800051c:	621a      	str	r2, [r3, #32]
	dy_hv20t_config->ses5_GPIO_Pin  = ses5_GPIO_Pin;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000522:	849a      	strh	r2, [r3, #36]	; 0x24

	dy_hv20t_config->ses6_GPIOx 	= ses6_GPIOx;
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	dy_hv20t_config->ses6_GPIO_Pin  = ses6_GPIO_Pin;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800052e:	859a      	strh	r2, [r3, #44]	; 0x2c

	dy_hv20t_config->ses7_GPIOx 	= ses7_GPIOx;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000534:	631a      	str	r2, [r3, #48]	; 0x30
	dy_hv20t_config->ses7_GPIO_Pin  = ses7_GPIO_Pin;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800053c:	869a      	strh	r2, [r3, #52]	; 0x34

	dy_hv20t_config->ses8_GPIOx 	= ses8_GPIOx;
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000542:	639a      	str	r2, [r3, #56]	; 0x38
	dy_hv20t_config->ses8_GPIO_Pin  = ses8_GPIO_Pin;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800054a:	879a      	strh	r2, [r3, #60]	; 0x3c

	dy_hv20t_config->Busy_GPIOx 	= Busy_GPIOx;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000550:	641a      	str	r2, [r3, #64]	; 0x40
	dy_hv20t_config->Busy_GPIO_Pin  = Busy_GPIO_Pin;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8000558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	dy_hv20t_config->mode_set.mode  = mode;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <play_mp3>:

void play_mp3(dy_hv20t_config* dy_hv20t_config, uint16_t* Music, uint16_t size){
 8000572:	b580      	push	{r7, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4613      	mov	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]

	if ((Music != NULL) || (size != 0)){
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d103      	bne.n	800058e <play_mp3+0x1c>
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	f000 80df 	beq.w	800074c <play_mp3+0x1da>

		/*************** For Mode1 ***************/

		if (dy_hv20t_config->mode_set.mode == Mode1){
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000594:	2b00      	cmp	r3, #0
 8000596:	f040 80d9 	bne.w	800074c <play_mp3+0x1da>

				if (Music[0] == 1) HAL_GPIO_WritePin(dy_hv20t_config->ses8_GPIOx, dy_hv20t_config->ses8_GPIO_Pin, GPIO_PIN_SET);
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d108      	bne.n	80005b4 <play_mp3+0x42>
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	f000 fe31 	bl	8001214 <HAL_GPIO_WritePin>
 80005b2:	e00b      	b.n	80005cc <play_mp3+0x5a>
				else if (Music[0] == 0) HAL_GPIO_WritePin(dy_hv20t_config->ses8_GPIOx, dy_hv20t_config->ses8_GPIO_Pin, GPIO_PIN_RESET);
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d107      	bne.n	80005cc <play_mp3+0x5a>
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fe24 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[1] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses7_GPIOx, dy_hv20t_config->ses7_GPIO_Pin, GPIO_PIN_SET);
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	3302      	adds	r3, #2
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d108      	bne.n	80005e8 <play_mp3+0x76>
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	f000 fe17 	bl	8001214 <HAL_GPIO_WritePin>
 80005e6:	e00c      	b.n	8000602 <play_mp3+0x90>
				else if (Music[1] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses7_GPIOx, dy_hv20t_config->ses7_GPIO_Pin, GPIO_PIN_RESET);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	3302      	adds	r3, #2
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <play_mp3+0x90>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80005fa:	2200      	movs	r2, #0
 80005fc:	4619      	mov	r1, r3
 80005fe:	f000 fe09 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[2] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses6_GPIOx, dy_hv20t_config->ses6_GPIO_Pin, GPIO_PIN_SET);
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	3304      	adds	r3, #4
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d108      	bne.n	800061e <play_mp3+0xac>
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000614:	2201      	movs	r2, #1
 8000616:	4619      	mov	r1, r3
 8000618:	f000 fdfc 	bl	8001214 <HAL_GPIO_WritePin>
 800061c:	e00c      	b.n	8000638 <play_mp3+0xc6>
				else if (Music[2] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses6_GPIOx, dy_hv20t_config->ses6_GPIO_Pin, GPIO_PIN_RESET);
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	3304      	adds	r3, #4
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d107      	bne.n	8000638 <play_mp3+0xc6>
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fdee 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[3] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses5_GPIOx, dy_hv20t_config->ses5_GPIO_Pin, GPIO_PIN_SET);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	3306      	adds	r3, #6
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d108      	bne.n	8000654 <play_mp3+0xe2>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6a18      	ldr	r0, [r3, #32]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800064a:	2201      	movs	r2, #1
 800064c:	4619      	mov	r1, r3
 800064e:	f000 fde1 	bl	8001214 <HAL_GPIO_WritePin>
 8000652:	e00c      	b.n	800066e <play_mp3+0xfc>
				else if (Music[3] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses5_GPIOx, dy_hv20t_config->ses5_GPIO_Pin, GPIO_PIN_RESET);
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	3306      	adds	r3, #6
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d107      	bne.n	800066e <play_mp3+0xfc>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6a18      	ldr	r0, [r3, #32]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	f000 fdd3 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[4] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses4_GPIOx, dy_hv20t_config->ses4_GPIO_Pin, GPIO_PIN_SET);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3308      	adds	r3, #8
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d108      	bne.n	800068a <play_mp3+0x118>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	6998      	ldr	r0, [r3, #24]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	8b9b      	ldrh	r3, [r3, #28]
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	f000 fdc6 	bl	8001214 <HAL_GPIO_WritePin>
 8000688:	e00c      	b.n	80006a4 <play_mp3+0x132>
				else if (Music[4] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses4_GPIOx, dy_hv20t_config->ses4_GPIO_Pin, GPIO_PIN_RESET);
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3308      	adds	r3, #8
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d107      	bne.n	80006a4 <play_mp3+0x132>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	6998      	ldr	r0, [r3, #24]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	8b9b      	ldrh	r3, [r3, #28]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	f000 fdb8 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[5] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses3_GPIOx, dy_hv20t_config->ses3_GPIO_Pin, GPIO_PIN_SET);
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	330a      	adds	r3, #10
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d108      	bne.n	80006c0 <play_mp3+0x14e>
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6918      	ldr	r0, [r3, #16]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	8a9b      	ldrh	r3, [r3, #20]
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 fdab 	bl	8001214 <HAL_GPIO_WritePin>
 80006be:	e00c      	b.n	80006da <play_mp3+0x168>
				else if (Music[5] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses3_GPIOx, dy_hv20t_config->ses3_GPIO_Pin, GPIO_PIN_RESET);
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	330a      	adds	r3, #10
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d107      	bne.n	80006da <play_mp3+0x168>
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6918      	ldr	r0, [r3, #16]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	8a9b      	ldrh	r3, [r3, #20]
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	f000 fd9d 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[6] == 1)HAL_GPIO_WritePin(dy_hv20t_config->ses2_GPIOx, dy_hv20t_config->ses2_GPIO_Pin, GPIO_PIN_SET);
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	330c      	adds	r3, #12
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d108      	bne.n	80006f6 <play_mp3+0x184>
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6898      	ldr	r0, [r3, #8]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	899b      	ldrh	r3, [r3, #12]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	f000 fd90 	bl	8001214 <HAL_GPIO_WritePin>
 80006f4:	e00c      	b.n	8000710 <play_mp3+0x19e>
				else if (Music[6] == 0)HAL_GPIO_WritePin(dy_hv20t_config->ses2_GPIOx, dy_hv20t_config->ses2_GPIO_Pin, GPIO_PIN_RESET);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	330c      	adds	r3, #12
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d107      	bne.n	8000710 <play_mp3+0x19e>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6898      	ldr	r0, [r3, #8]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	899b      	ldrh	r3, [r3, #12]
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	f000 fd82 	bl	8001214 <HAL_GPIO_WritePin>

				if (Music[7] == 1) HAL_GPIO_WritePin(dy_hv20t_config->ses1_GPIOx, dy_hv20t_config->ses1_GPIO_Pin, GPIO_PIN_SET);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	330e      	adds	r3, #14
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <play_mp3+0x1ba>
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	889b      	ldrh	r3, [r3, #4]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f000 fd75 	bl	8001214 <HAL_GPIO_WritePin>
 800072a:	e00c      	b.n	8000746 <play_mp3+0x1d4>
				else if (Music[7] == 0) HAL_GPIO_WritePin(dy_hv20t_config->ses1_GPIOx, dy_hv20t_config->ses1_GPIO_Pin, GPIO_PIN_RESET);
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	330e      	adds	r3, #14
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d107      	bne.n	8000746 <play_mp3+0x1d4>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6818      	ldr	r0, [r3, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	889b      	ldrh	r3, [r3, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	f000 fd67 	bl	8001214 <HAL_GPIO_WritePin>

				HAL_Delay(100);
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f000 fad6 	bl	8000cf8 <HAL_Delay>

		}
	}
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b090      	sub	sp, #64	; 0x40
 8000758:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fa5b 	bl	8000c14 <HAL_Init>

  /* USER CODE BEGIN Init */
  dy_hv20t_init(&sound_module,ses1_GPIO_Port, ses1_Pin, ses2_GPIO_Port, ses2_Pin,
 800075e:	2300      	movs	r3, #0
 8000760:	930f      	str	r3, [sp, #60]	; 0x3c
 8000762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000766:	930e      	str	r3, [sp, #56]	; 0x38
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <main+0x7c>)
 800076a:	930d      	str	r3, [sp, #52]	; 0x34
 800076c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000770:	930c      	str	r3, [sp, #48]	; 0x30
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <main+0x80>)
 8000774:	930b      	str	r3, [sp, #44]	; 0x2c
 8000776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800077a:	930a      	str	r3, [sp, #40]	; 0x28
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <main+0x80>)
 800077e:	9309      	str	r3, [sp, #36]	; 0x24
 8000780:	2340      	movs	r3, #64	; 0x40
 8000782:	9308      	str	r3, [sp, #32]
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <main+0x80>)
 8000786:	9307      	str	r3, [sp, #28]
 8000788:	2320      	movs	r3, #32
 800078a:	9306      	str	r3, [sp, #24]
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <main+0x80>)
 800078e:	9305      	str	r3, [sp, #20]
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	9304      	str	r3, [sp, #16]
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <main+0x7c>)
 8000798:	9303      	str	r3, [sp, #12]
 800079a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <main+0x7c>)
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <main+0x7c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <main+0x7c>)
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <main+0x84>)
 80007b2:	f7ff fe91 	bl	80004d8 <dy_hv20t_init>
				  Busy_GPIO_Port, Busy_Pin, Mode1);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f813 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f8a7 	bl	800090c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007be:	f000 f87b 	bl	80008b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  play_mp3(&sound_module, music2, sizeof(music2));
 80007c2:	2210      	movs	r2, #16
 80007c4:	4905      	ldr	r1, [pc, #20]	; (80007dc <main+0x88>)
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <main+0x84>)
 80007c8:	f7ff fed3 	bl	8000572 <play_mp3>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <main+0x78>
 80007ce:	bf00      	nop
 80007d0:	40020400 	.word	0x40020400
 80007d4:	40020800 	.word	0x40020800
 80007d8:	2000007c 	.word	0x2000007c
 80007dc:	20000000 	.word	0x20000000

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fca8 	bl	8002144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xd0>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <SystemClock_Config+0xd0>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SystemClock_Config+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <SystemClock_Config+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <SystemClock_Config+0xd4>)
 800082e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <SystemClock_Config+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084c:	2302      	movs	r3, #2
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000854:	2310      	movs	r3, #16
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000858:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800085c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800085e:	2304      	movs	r3, #4
 8000860:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000862:	2307      	movs	r3, #7
 8000864:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fcec 	bl	8001248 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000876:	f000 f8f1 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2302      	movs	r3, #2
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2102      	movs	r1, #2
 8000896:	4618      	mov	r0, r3
 8000898:	f000 ff4e 	bl	8001738 <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008a2:	f000 f8db 	bl	8000a5c <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	; 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_USART2_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f001 f942 	bl	8001b78 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f8af 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000038 	.word	0x20000038
 8000908:	40004400 	.word	0x40004400

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b49      	ldr	r3, [pc, #292]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a48      	ldr	r2, [pc, #288]	; (8000a4c <MX_GPIO_Init+0x140>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b46      	ldr	r3, [pc, #280]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b42      	ldr	r3, [pc, #264]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a41      	ldr	r2, [pc, #260]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a3a      	ldr	r2, [pc, #232]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <MX_GPIO_Init+0x140>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <MX_GPIO_Init+0x140>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a33      	ldr	r2, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <MX_GPIO_Init+0x140>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2120      	movs	r1, #32
 8000996:	482e      	ldr	r0, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x144>)
 8000998:	f000 fc3c 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ses5_Pin|ses6_Pin|ses7_Pin|ses8_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 7158 	mov.w	r1, #864	; 0x360
 80009a2:	482c      	ldr	r0, [pc, #176]	; (8000a54 <MX_GPIO_Init+0x148>)
 80009a4:	f000 fc36 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ses1_Pin|ses4_Pin|ses3_Pin|ses2_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f24e 0102 	movw	r1, #57346	; 0xe002
 80009ae:	482a      	ldr	r0, [pc, #168]	; (8000a58 <MX_GPIO_Init+0x14c>)
 80009b0:	f000 fc30 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4822      	ldr	r0, [pc, #136]	; (8000a54 <MX_GPIO_Init+0x148>)
 80009cc:	f000 fa9e 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	481a      	ldr	r0, [pc, #104]	; (8000a50 <MX_GPIO_Init+0x144>)
 80009e8:	f000 fa90 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ses5_Pin ses6_Pin ses7_Pin ses8_Pin */
  GPIO_InitStruct.Pin = ses5_Pin|ses6_Pin|ses7_Pin|ses8_Pin;
 80009ec:	f44f 7358 	mov.w	r3, #864	; 0x360
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_GPIO_Init+0x148>)
 8000a06:	f000 fa81 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ses1_Pin ses4_Pin ses3_Pin ses2_Pin */
  GPIO_InitStruct.Pin = ses1_Pin|ses4_Pin|ses3_Pin|ses2_Pin;
 8000a0a:	f24e 0302 	movw	r3, #57346	; 0xe002
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_GPIO_Init+0x14c>)
 8000a24:	f000 fa72 	bl	8000f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Busy_Pin */
  GPIO_InitStruct.Pin = Busy_Pin;
 8000a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Busy_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_GPIO_Init+0x14c>)
 8000a3e:	f000 fa65 	bl	8000f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020800 	.word	0x40020800
 8000a58:	40020400 	.word	0x40020400

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f000 f9fc 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0x84>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12b      	bne.n	8000b32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0x88>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b12:	230c      	movs	r3, #12
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_MspInit+0x8c>)
 8000b2e:	f000 f9ed 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f890 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f001 fa85 	bl	80020fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fdaf 	bl	8000754 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c04:	08002194 	.word	0x08002194
  ldr r2, =_sbss
 8000c08:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c0c:	200000c8 	.word	0x200000c8

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f931 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff ff0e 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f93b 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f911 	bl	8000eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000010 	.word	0x20000010
 8000cb0:	20000018 	.word	0x20000018
 8000cb4:	20000014 	.word	0x20000014

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000018 	.word	0x20000018
 8000cdc:	200000c4 	.word	0x200000c4

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000c4 	.word	0x200000c4

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000018 	.word	0x20000018

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff47 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff5c 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb0 	bl	8000e60 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e159      	b.n	80011dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 8148 	bne.w	80011d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d005      	beq.n	8000f5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d017      	beq.n	8000ffc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80a2 	beq.w	80011d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x2e8>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a56      	ldr	r2, [pc, #344]	; (80011f4 <HAL_GPIO_Init+0x2e8>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <HAL_GPIO_Init+0x2e8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ae:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_GPIO_Init+0x2ec>)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a49      	ldr	r2, [pc, #292]	; (80011fc <HAL_GPIO_Init+0x2f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x202>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a48      	ldr	r2, [pc, #288]	; (8001200 <HAL_GPIO_Init+0x2f4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x1fe>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_GPIO_Init+0x2f8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x1fa>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_GPIO_Init+0x2fc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x1f6>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_GPIO_Init+0x300>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x1f2>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x204>
 80010fe:	2307      	movs	r3, #7
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x204>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x204>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x204>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x204>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x2ec>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_GPIO_Init+0x304>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x304>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_GPIO_Init+0x304>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x304>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_GPIO_Init+0x304>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_GPIO_Init+0x304>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f aea2 	bls.w	8000f28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40013c00 	.word	0x40013c00

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122a:	887a      	ldrh	r2, [r7, #2]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001230:	e003      	b.n	800123a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	041a      	lsls	r2, r3, #16
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	619a      	str	r2, [r3, #24]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e267      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d075      	beq.n	8001352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b04      	cmp	r3, #4
 8001270:	d00c      	beq.n	800128c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001272:	4b85      	ldr	r3, [pc, #532]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d112      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128a:	d10b      	bne.n	80012a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	4b7e      	ldr	r3, [pc, #504]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05b      	beq.n	8001350 <HAL_RCC_OscConfig+0x108>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d157      	bne.n	8001350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e242      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x74>
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a75      	ldr	r2, [pc, #468]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e01d      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x98>
 80012c6:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6f      	ldr	r2, [pc, #444]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b6d      	ldr	r3, [pc, #436]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6c      	ldr	r2, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e00b      	b.n	80012f8 <HAL_RCC_OscConfig+0xb0>
 80012e0:	4b69      	ldr	r3, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a68      	ldr	r2, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fcee 	bl	8000ce0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001308:	f7ff fcea 	bl	8000ce0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b64      	cmp	r3, #100	; 0x64
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e207      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0xc0>
 8001326:	e014      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001328:	f7ff fcda 	bl	8000ce0 <HAL_GetTick>
 800132c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001330:	f7ff fcd6 	bl	8000ce0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	; 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e1f3      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	4b51      	ldr	r3, [pc, #324]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0xe8>
 800134e:	e000      	b.n	8001352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d063      	beq.n	8001426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	4b4a      	ldr	r3, [pc, #296]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136a:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d11c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b44      	ldr	r3, [pc, #272]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e1c7      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4937      	ldr	r1, [pc, #220]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	e03a      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d020      	beq.n	80013fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b8:	4b34      	ldr	r3, [pc, #208]	; (800148c <HAL_RCC_OscConfig+0x244>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc8f 	bl	8000ce0 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc8b 	bl	8000ce0 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e1a8      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4925      	ldr	r1, [pc, #148]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	600b      	str	r3, [r1, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <HAL_RCC_OscConfig+0x244>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fc6e 	bl	8000ce0 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001408:	f7ff fc6a 	bl	8000ce0 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e187      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d036      	beq.n	80014a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d016      	beq.n	8001468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_RCC_OscConfig+0x248>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fc4e 	bl	8000ce0 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fc4a 	bl	8000ce0 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e167      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x240>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x200>
 8001466:	e01b      	b.n	80014a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_OscConfig+0x248>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146e:	f7ff fc37 	bl	8000ce0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001474:	e00e      	b.n	8001494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001476:	f7ff fc33 	bl	8000ce0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d907      	bls.n	8001494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e150      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
 8001488:	40023800 	.word	0x40023800
 800148c:	42470000 	.word	0x42470000
 8001490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001494:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ea      	bne.n	8001476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8097 	beq.w	80015dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b2:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10f      	bne.n	80014de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a7c      	ldr	r2, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014da:	2301      	movs	r3, #1
 80014dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b77      	ldr	r3, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x474>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d118      	bne.n	800151c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ea:	4b74      	ldr	r3, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a73      	ldr	r2, [pc, #460]	; (80016bc <HAL_RCC_OscConfig+0x474>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbf3 	bl	8000ce0 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fe:	f7ff fbef 	bl	8000ce0 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e10c      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <HAL_RCC_OscConfig+0x474>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x2ea>
 8001524:	4b64      	ldr	r3, [pc, #400]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a63      	ldr	r2, [pc, #396]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	e01c      	b.n	800156c <HAL_RCC_OscConfig+0x324>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b05      	cmp	r3, #5
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x30c>
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a5e      	ldr	r2, [pc, #376]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5b      	ldr	r2, [pc, #364]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0x324>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a57      	ldr	r2, [pc, #348]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	4b55      	ldr	r3, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a54      	ldr	r2, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0304 	bic.w	r3, r3, #4
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d015      	beq.n	80015a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fbb4 	bl	8000ce0 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fbb0 	bl	8000ce0 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0cb      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ee      	beq.n	800157c <HAL_RCC_OscConfig+0x334>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb9e 	bl	8000ce0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb9a 	bl	8000ce0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0b5      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ee      	bne.n	80015a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 80a1 	beq.w	8001728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d05c      	beq.n	80016ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d141      	bne.n	800167e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_RCC_OscConfig+0x478>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fb6e 	bl	8000ce0 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fb6a 	bl	8000ce0 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e087      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	085b      	lsrs	r3, r3, #1
 800163e:	3b01      	subs	r3, #1
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	491b      	ldr	r1, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_RCC_OscConfig+0x478>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fb43 	bl	8000ce0 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff fb3f 	bl	8000ce0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e05c      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x416>
 800167c:	e054      	b.n	8001728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <HAL_RCC_OscConfig+0x478>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb2c 	bl	8000ce0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fb28 	bl	8000ce0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e045      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x470>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x444>
 80016aa:	e03d      	b.n	8001728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e038      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000
 80016c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x4ec>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d028      	beq.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d121      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d11a      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f4:	4013      	ands	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	085b      	lsrs	r3, r3, #1
 800170c:	3b01      	subs	r3, #1
 800170e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0cc      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d90c      	bls.n	8001774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d044      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e067      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff fa5a 	bl	8000ce0 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff fa56 	bl	8000ce0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018be:	f000 f821 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	490a      	ldr	r1, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f9ba 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	0800216c 	.word	0x0800216c
 80018fc:	20000010 	.word	0x20000010
 8001900:	20000014 	.word	0x20000014

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b094      	sub	sp, #80	; 0x50
 800190a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
 8001910:	2300      	movs	r3, #0
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001914:	2300      	movs	r3, #0
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d00d      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x40>
 8001928:	2b08      	cmp	r3, #8
 800192a:	f200 80e1 	bhi.w	8001af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x34>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d003      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x3a>
 8001936:	e0db      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800193c:	e0db      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001942:	e0d8      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	2200      	movs	r2, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
 8001964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
 8001972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001976:	4622      	mov	r2, r4
 8001978:	462b      	mov	r3, r5
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0159      	lsls	r1, r3, #5
 8001984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001988:	0150      	lsls	r0, r2, #5
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4621      	mov	r1, r4
 8001990:	1a51      	subs	r1, r2, r1
 8001992:	6139      	str	r1, [r7, #16]
 8001994:	4629      	mov	r1, r5
 8001996:	eb63 0301 	sbc.w	r3, r3, r1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a8:	4659      	mov	r1, fp
 80019aa:	018b      	lsls	r3, r1, #6
 80019ac:	4651      	mov	r1, sl
 80019ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b2:	4651      	mov	r1, sl
 80019b4:	018a      	lsls	r2, r1, #6
 80019b6:	4651      	mov	r1, sl
 80019b8:	ebb2 0801 	subs.w	r8, r2, r1
 80019bc:	4659      	mov	r1, fp
 80019be:	eb63 0901 	sbc.w	r9, r3, r1
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d6:	4690      	mov	r8, r2
 80019d8:	4699      	mov	r9, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	eb18 0303 	adds.w	r3, r8, r3
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	462b      	mov	r3, r5
 80019e4:	eb49 0303 	adc.w	r3, r9, r3
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f6:	4629      	mov	r1, r5
 80019f8:	024b      	lsls	r3, r1, #9
 80019fa:	4621      	mov	r1, r4
 80019fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a00:	4621      	mov	r1, r4
 8001a02:	024a      	lsls	r2, r1, #9
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a14:	f7fe fbde 	bl	80001d4 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a20:	e058      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	464b      	mov	r3, r9
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	0159      	lsls	r1, r3, #5
 8001a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4e:	0150      	lsls	r0, r2, #5
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4641      	mov	r1, r8
 8001a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a74:	ebb2 040a 	subs.w	r4, r2, sl
 8001a78:	eb63 050b 	sbc.w	r5, r3, fp
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	00eb      	lsls	r3, r5, #3
 8001a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8a:	00e2      	lsls	r2, r4, #3
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	461d      	mov	r5, r3
 8001a90:	4643      	mov	r3, r8
 8001a92:	18e3      	adds	r3, r4, r3
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	464b      	mov	r3, r9
 8001a98:	eb45 0303 	adc.w	r3, r5, r3
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aaa:	4629      	mov	r1, r5
 8001aac:	028b      	lsls	r3, r1, #10
 8001aae:	4621      	mov	r1, r4
 8001ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	028a      	lsls	r2, r1, #10
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	61fa      	str	r2, [r7, #28]
 8001ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac8:	f7fe fb84 	bl	80001d4 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3750      	adds	r7, #80	; 0x50
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000010 	.word	0x20000010

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	0800217c 	.word	0x0800217c

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffdc 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0b5b      	lsrs	r3, r3, #13
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	0800217c 	.word	0x0800217c

08001b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e03f      	b.n	8001c0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe ff8a 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2224      	movs	r2, #36	; 0x24
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f829 	bl	8001c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c18:	b0c0      	sub	sp, #256	; 0x100
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c30:	68d9      	ldr	r1, [r3, #12]
 8001c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	ea40 0301 	orr.w	r3, r0, r1
 8001c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c6c:	f021 010c 	bic.w	r1, r1, #12
 8001c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c8e:	6999      	ldr	r1, [r3, #24]
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	ea40 0301 	orr.w	r3, r0, r1
 8001c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b8f      	ldr	r3, [pc, #572]	; (8001ee0 <UART_SetConfig+0x2cc>)
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d005      	beq.n	8001cb4 <UART_SetConfig+0xa0>
 8001ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b8d      	ldr	r3, [pc, #564]	; (8001ee4 <UART_SetConfig+0x2d0>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d104      	bne.n	8001cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cb4:	f7ff ff4c 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8001cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001cbc:	e003      	b.n	8001cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cbe:	f7ff ff33 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd0:	f040 810c 	bne.w	8001eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	1891      	adds	r1, r2, r2
 8001cec:	65b9      	str	r1, [r7, #88]	; 0x58
 8001cee:	415b      	adcs	r3, r3
 8001cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	eb12 0801 	adds.w	r8, r2, r1
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb43 0901 	adc.w	r9, r3, r1
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d16:	4690      	mov	r8, r2
 8001d18:	4699      	mov	r9, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	eb18 0303 	adds.w	r3, r8, r3
 8001d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001d24:	462b      	mov	r3, r5
 8001d26:	eb49 0303 	adc.w	r3, r9, r3
 8001d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001d42:	460b      	mov	r3, r1
 8001d44:	18db      	adds	r3, r3, r3
 8001d46:	653b      	str	r3, [r7, #80]	; 0x50
 8001d48:	4613      	mov	r3, r2
 8001d4a:	eb42 0303 	adc.w	r3, r2, r3
 8001d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8001d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001d58:	f7fe fa3c 	bl	80001d4 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4b61      	ldr	r3, [pc, #388]	; (8001ee8 <UART_SetConfig+0x2d4>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011c      	lsls	r4, r3, #4
 8001d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001d74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	464b      	mov	r3, r9
 8001d80:	1891      	adds	r1, r2, r2
 8001d82:	64b9      	str	r1, [r7, #72]	; 0x48
 8001d84:	415b      	adcs	r3, r3
 8001d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8001d92:	4649      	mov	r1, r9
 8001d94:	eb43 0b01 	adc.w	fp, r3, r1
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	4643      	mov	r3, r8
 8001db2:	eb1a 0303 	adds.w	r3, sl, r3
 8001db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001dba:	464b      	mov	r3, r9
 8001dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8001dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	18db      	adds	r3, r3, r3
 8001ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8001dde:	4613      	mov	r3, r2
 8001de0:	eb42 0303 	adc.w	r3, r2, r3
 8001de4:	647b      	str	r3, [r7, #68]	; 0x44
 8001de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001dee:	f7fe f9f1 	bl	80001d4 <__aeabi_uldivmod>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <UART_SetConfig+0x2d4>)
 8001dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2264      	movs	r2, #100	; 0x64
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	1acb      	subs	r3, r1, r3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <UART_SetConfig+0x2d4>)
 8001e10:	fba3 2302 	umull	r2, r3, r3, r2
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e1c:	441c      	add	r4, r3
 8001e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001e30:	4642      	mov	r2, r8
 8001e32:	464b      	mov	r3, r9
 8001e34:	1891      	adds	r1, r2, r2
 8001e36:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e38:	415b      	adcs	r3, r3
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e40:	4641      	mov	r1, r8
 8001e42:	1851      	adds	r1, r2, r1
 8001e44:	6339      	str	r1, [r7, #48]	; 0x30
 8001e46:	4649      	mov	r1, r9
 8001e48:	414b      	adcs	r3, r1
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001e58:	4659      	mov	r1, fp
 8001e5a:	00cb      	lsls	r3, r1, #3
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e62:	4651      	mov	r1, sl
 8001e64:	00ca      	lsls	r2, r1, #3
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e74:	464b      	mov	r3, r9
 8001e76:	460a      	mov	r2, r1
 8001e78:	eb42 0303 	adc.w	r3, r2, r3
 8001e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001e94:	460b      	mov	r3, r1
 8001e96:	18db      	adds	r3, r3, r3
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	eb42 0303 	adc.w	r3, r2, r3
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001eaa:	f7fe f993 	bl	80001d4 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <UART_SetConfig+0x2d4>)
 8001eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	2164      	movs	r1, #100	; 0x64
 8001ebc:	fb01 f303 	mul.w	r3, r1, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	3332      	adds	r3, #50	; 0x32
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <UART_SetConfig+0x2d4>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	f003 0207 	and.w	r2, r3, #7
 8001ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4422      	add	r2, r4
 8001eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001edc:	e105      	b.n	80020ea <UART_SetConfig+0x4d6>
 8001ede:	bf00      	nop
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001efe:	4642      	mov	r2, r8
 8001f00:	464b      	mov	r3, r9
 8001f02:	1891      	adds	r1, r2, r2
 8001f04:	6239      	str	r1, [r7, #32]
 8001f06:	415b      	adcs	r3, r3
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f0e:	4641      	mov	r1, r8
 8001f10:	1854      	adds	r4, r2, r1
 8001f12:	4649      	mov	r1, r9
 8001f14:	eb43 0501 	adc.w	r5, r3, r1
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	00eb      	lsls	r3, r5, #3
 8001f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f26:	00e2      	lsls	r2, r4, #3
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4643      	mov	r3, r8
 8001f2e:	18e3      	adds	r3, r4, r3
 8001f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f34:	464b      	mov	r3, r9
 8001f36:	eb45 0303 	adc.w	r3, r5, r3
 8001f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	008b      	lsls	r3, r1, #2
 8001f5e:	4621      	mov	r1, r4
 8001f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f64:	4621      	mov	r1, r4
 8001f66:	008a      	lsls	r2, r1, #2
 8001f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001f6c:	f7fe f932 	bl	80001d4 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <UART_SetConfig+0x4e4>)
 8001f76:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	011c      	lsls	r4, r3, #4
 8001f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f82:	2200      	movs	r2, #0
 8001f84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001f88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001f90:	4642      	mov	r2, r8
 8001f92:	464b      	mov	r3, r9
 8001f94:	1891      	adds	r1, r2, r2
 8001f96:	61b9      	str	r1, [r7, #24]
 8001f98:	415b      	adcs	r3, r3
 8001f9a:	61fb      	str	r3, [r7, #28]
 8001f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	1851      	adds	r1, r2, r1
 8001fa4:	6139      	str	r1, [r7, #16]
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	414b      	adcs	r3, r1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb8:	4659      	mov	r1, fp
 8001fba:	00cb      	lsls	r3, r1, #3
 8001fbc:	4651      	mov	r1, sl
 8001fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fc2:	4651      	mov	r1, sl
 8001fc4:	00ca      	lsls	r2, r1, #3
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4642      	mov	r2, r8
 8001fce:	189b      	adds	r3, r3, r2
 8001fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fd4:	464b      	mov	r3, r9
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	eb42 0303 	adc.w	r3, r2, r3
 8001fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	008b      	lsls	r3, r1, #2
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002002:	4641      	mov	r1, r8
 8002004:	008a      	lsls	r2, r1, #2
 8002006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800200a:	f7fe f8e3 	bl	80001d4 <__aeabi_uldivmod>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <UART_SetConfig+0x4e4>)
 8002014:	fba3 1302 	umull	r1, r3, r3, r2
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	2164      	movs	r1, #100	; 0x64
 800201c:	fb01 f303 	mul.w	r3, r1, r3
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	3332      	adds	r3, #50	; 0x32
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <UART_SetConfig+0x4e4>)
 8002028:	fba2 2303 	umull	r2, r3, r2, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002032:	441c      	add	r4, r3
 8002034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002038:	2200      	movs	r2, #0
 800203a:	673b      	str	r3, [r7, #112]	; 0x70
 800203c:	677a      	str	r2, [r7, #116]	; 0x74
 800203e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002042:	4642      	mov	r2, r8
 8002044:	464b      	mov	r3, r9
 8002046:	1891      	adds	r1, r2, r2
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	415b      	adcs	r3, r3
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002052:	4641      	mov	r1, r8
 8002054:	1851      	adds	r1, r2, r1
 8002056:	6039      	str	r1, [r7, #0]
 8002058:	4649      	mov	r1, r9
 800205a:	414b      	adcs	r3, r1
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800206a:	4659      	mov	r1, fp
 800206c:	00cb      	lsls	r3, r1, #3
 800206e:	4651      	mov	r1, sl
 8002070:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002074:	4651      	mov	r1, sl
 8002076:	00ca      	lsls	r2, r1, #3
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	4603      	mov	r3, r0
 800207e:	4642      	mov	r2, r8
 8002080:	189b      	adds	r3, r3, r2
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
 8002084:	464b      	mov	r3, r9
 8002086:	460a      	mov	r2, r1
 8002088:	eb42 0303 	adc.w	r3, r2, r3
 800208c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800208e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	663b      	str	r3, [r7, #96]	; 0x60
 8002098:	667a      	str	r2, [r7, #100]	; 0x64
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80020a6:	4649      	mov	r1, r9
 80020a8:	008b      	lsls	r3, r1, #2
 80020aa:	4641      	mov	r1, r8
 80020ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020b0:	4641      	mov	r1, r8
 80020b2:	008a      	lsls	r2, r1, #2
 80020b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020b8:	f7fe f88c 	bl	80001d4 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <UART_SetConfig+0x4e4>)
 80020c2:	fba3 1302 	umull	r1, r3, r3, r2
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2164      	movs	r1, #100	; 0x64
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	3332      	adds	r3, #50	; 0x32
 80020d4:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <UART_SetConfig+0x4e4>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4422      	add	r2, r4
 80020e8:	609a      	str	r2, [r3, #8]
}
 80020ea:	bf00      	nop
 80020ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80020f0:	46bd      	mov	sp, r7
 80020f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f6:	bf00      	nop
 80020f8:	51eb851f 	.word	0x51eb851f

080020fc <__libc_init_array>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	4d0d      	ldr	r5, [pc, #52]	; (8002134 <__libc_init_array+0x38>)
 8002100:	4c0d      	ldr	r4, [pc, #52]	; (8002138 <__libc_init_array+0x3c>)
 8002102:	1b64      	subs	r4, r4, r5
 8002104:	10a4      	asrs	r4, r4, #2
 8002106:	2600      	movs	r6, #0
 8002108:	42a6      	cmp	r6, r4
 800210a:	d109      	bne.n	8002120 <__libc_init_array+0x24>
 800210c:	4d0b      	ldr	r5, [pc, #44]	; (800213c <__libc_init_array+0x40>)
 800210e:	4c0c      	ldr	r4, [pc, #48]	; (8002140 <__libc_init_array+0x44>)
 8002110:	f000 f820 	bl	8002154 <_init>
 8002114:	1b64      	subs	r4, r4, r5
 8002116:	10a4      	asrs	r4, r4, #2
 8002118:	2600      	movs	r6, #0
 800211a:	42a6      	cmp	r6, r4
 800211c:	d105      	bne.n	800212a <__libc_init_array+0x2e>
 800211e:	bd70      	pop	{r4, r5, r6, pc}
 8002120:	f855 3b04 	ldr.w	r3, [r5], #4
 8002124:	4798      	blx	r3
 8002126:	3601      	adds	r6, #1
 8002128:	e7ee      	b.n	8002108 <__libc_init_array+0xc>
 800212a:	f855 3b04 	ldr.w	r3, [r5], #4
 800212e:	4798      	blx	r3
 8002130:	3601      	adds	r6, #1
 8002132:	e7f2      	b.n	800211a <__libc_init_array+0x1e>
 8002134:	0800218c 	.word	0x0800218c
 8002138:	0800218c 	.word	0x0800218c
 800213c:	0800218c 	.word	0x0800218c
 8002140:	08002190 	.word	0x08002190

08002144 <memset>:
 8002144:	4402      	add	r2, r0
 8002146:	4603      	mov	r3, r0
 8002148:	4293      	cmp	r3, r2
 800214a:	d100      	bne.n	800214e <memset+0xa>
 800214c:	4770      	bx	lr
 800214e:	f803 1b01 	strb.w	r1, [r3], #1
 8002152:	e7f9      	b.n	8002148 <memset+0x4>

08002154 <_init>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	bf00      	nop
 8002158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215a:	bc08      	pop	{r3}
 800215c:	469e      	mov	lr, r3
 800215e:	4770      	bx	lr

08002160 <_fini>:
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	bf00      	nop
 8002164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002166:	bc08      	pop	{r3}
 8002168:	469e      	mov	lr, r3
 800216a:	4770      	bx	lr
